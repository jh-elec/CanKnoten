
MCP2515_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011e  0080011e  0000070c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157c  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c4  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007be  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a70  00000000  00000000  00003c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000046ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	ed 02       	muls	r30, r29
  6a:	f1 02       	muls	r31, r17
  6c:	f5 02       	muls	r31, r21
  6e:	f9 02       	muls	r31, r25
  70:	fd 02       	muls	r31, r29
  72:	01 03       	mulsu	r16, r17
  74:	05 03       	mulsu	r16, r21
  76:	09 03       	fmul	r16, r17

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d4 e0       	ldi	r29, 0x04	; 4
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ea e5       	ldi	r30, 0x5A	; 90
  8c:	f6 e0       	ldi	r31, 0x06	; 6
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	ae e1       	ldi	r26, 0x1E	; 30
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a6 33       	cpi	r26, 0x36	; 54
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  ae:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
#define LED_OFF		LED_PORT	&= ~(1<<LED_BP)
#define LED_TGL		LED_PORT	^= (1<<LED_BP)

int main(void)
{
	DDRD = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10

	PORTD = 0xFF;
  ba:	8b b9       	out	0x0b, r24	; 11
	SUMMER_OFF;
  bc:	59 98       	cbi	0x0b, 1	; 11
	LED_ON;
  be:	58 9a       	sbi	0x0b, 0	; 11
	
    spiInit( PRESCALER_128  , MODE4 , DOUBLE_SPEED_OFF );
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 c4 02 	call	0x588	; 0x588 <spiInit>
	Mcp2515Init(MCP2515_250KBPS);
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <Mcp2515Init>
		
		static tCANError ErrorMessage;
		
		Mcp2515GetError( &ErrorMessage );
		
 		TxMessage.Identifier = 0x1;
  d0:	c9 e2       	ldi	r28, 0x29	; 41
  d2:	d1 e0       	ldi	r29, 0x01	; 1
  d4:	ee 24       	eor	r14, r14
  d6:	e3 94       	inc	r14
  d8:	f1 2c       	mov	r15, r1
 		TxMessage.Header.Length = 2;
  da:	0b e2       	ldi	r16, 0x2B	; 43
  dc:	11 e0       	ldi	r17, 0x01	; 1
				}					
			}break;
			
			case 0x2:
			{
				LED_TGL;	
  de:	dd 24       	eor	r13, r13
  e0:	d3 94       	inc	r13
		
		static tCAN RxMessage , TxMessage;
		
		static tCANError ErrorMessage;
		
		Mcp2515GetError( &ErrorMessage );
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 a1 02 	call	0x542	; 0x542 <Mcp2515GetError>
		
 		TxMessage.Identifier = 0x1;
  ea:	f9 82       	std	Y+1, r15	; 0x01
  ec:	e8 82       	st	Y, r14
 		TxMessage.Header.Length = 2;
  ee:	f8 01       	movw	r30, r16
  f0:	80 81       	ld	r24, Z
  f2:	87 78       	andi	r24, 0x87	; 135
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	80 83       	st	Z, r24
		TxMessage.Data[0] = ErrorMessage.Receive;
  f8:	e4 e3       	ldi	r30, 0x34	; 52
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	80 81       	ld	r24, Z
  fe:	8b 83       	std	Y+3, r24	; 0x03
		TxMessage.Data[1] = ErrorMessage.Transmit;
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	8c 83       	std	Y+4, r24	; 0x04
 		Mcp2515SendMessage( &TxMessage );
 104:	ce 01       	movw	r24, r28
 106:	0e 94 45 02 	call	0x48a	; 0x48a <Mcp2515SendMessage>
		
		Mcp2515ReadMessage( &RxMessage );
 10a:	8e e1       	ldi	r24, 0x1E	; 30
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Mcp2515ReadMessage>
		
		switch( RxMessage.Identifier )
 112:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 116:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	19 f0       	breq	.+6      	; 0x126 <main+0x70>
 120:	02 97       	sbiw	r24, 0x02	; 2
 122:	c9 f0       	breq	.+50     	; 0x156 <main+0xa0>
 124:	1b c0       	rjmp	.+54     	; 0x15c <main+0xa6>
 126:	83 e0       	ldi	r24, 0x03	; 3
		{
			case 0x1:
			{
				for (uint8_t x = 0 ; x < 3 ; x++ )
				{
 					SUMMER_ON;
 128:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	ff e7       	ldi	r31, 0x7F	; 127
 12c:	28 e3       	ldi	r18, 0x38	; 56
 12e:	31 e0       	ldi	r19, 0x01	; 1
 130:	f1 50       	subi	r31, 0x01	; 1
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x7a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x84>
 13a:	00 00       	nop
 					_delay_ms(25);
 					SUMMER_OFF;
 13c:	59 98       	cbi	0x0b, 1	; 11
 13e:	9f e7       	ldi	r25, 0x7F	; 127
 140:	ea e1       	ldi	r30, 0x1A	; 26
 142:	f6 e0       	ldi	r31, 0x06	; 6
 144:	91 50       	subi	r25, 0x01	; 1
 146:	e0 40       	sbci	r30, 0x00	; 0
 148:	f0 40       	sbci	r31, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x8e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x98>
 14e:	00 00       	nop
 150:	81 50       	subi	r24, 0x01	; 1
		
		switch( RxMessage.Identifier )
		{
			case 0x1:
			{
				for (uint8_t x = 0 ; x < 3 ; x++ )
 152:	51 f7       	brne	.-44     	; 0x128 <main+0x72>
 154:	03 c0       	rjmp	.+6      	; 0x15c <main+0xa6>
				}					
			}break;
			
			case 0x2:
			{
				LED_TGL;	
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	8d 25       	eor	r24, r13
 15a:	8b b9       	out	0x0b, r24	; 11
			case 0x3:
			{
				
			}break;
		}
		RxMessage.Identifier = 0;
 15c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 160:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>

    }
 164:	be cf       	rjmp	.-132    	; 0xe2 <main+0x2c>

00000166 <Mcp2515Write>:
		// Alle Puffer sind in benutzung..
		return 0;
	}
	
	return 1;// Mindestens 1 Puffer ist frei..
}
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	f4 2e       	mov	r15, r20
 172:	24 e0       	ldi	r18, 0x04	; 4
 174:	42 17       	cp	r20, r18
 176:	19 f0       	breq	.+6      	; 0x17e <Mcp2515Write+0x18>
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	42 13       	cpse	r20, r18
 17c:	01 c0       	rjmp	.+2      	; 0x180 <Mcp2515Write+0x1a>
 17e:	5b 98       	cbi	0x0b, 3	; 11
 180:	66 23       	and	r22, r22
 182:	71 f0       	breq	.+28     	; 0x1a0 <Mcp2515Write+0x3a>
 184:	ec 01       	movw	r28, r24
 186:	61 50       	subi	r22, 0x01	; 1
 188:	06 2f       	mov	r16, r22
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	08 0f       	add	r16, r24
 192:	19 1f       	adc	r17, r25
 194:	89 91       	ld	r24, Y+
 196:	0e 94 1a 03 	call	0x634	; 0x634 <spiWrite>
 19a:	c0 17       	cp	r28, r16
 19c:	d1 07       	cpc	r29, r17
 19e:	d1 f7       	brne	.-12     	; 0x194 <Mcp2515Write+0x2e>
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	f8 16       	cp	r15, r24
 1a4:	19 f0       	breq	.+6      	; 0x1ac <Mcp2515Write+0x46>
 1a6:	24 e0       	ldi	r18, 0x04	; 4
 1a8:	f2 12       	cpse	r15, r18
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <Mcp2515Write+0x48>
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	08 95       	ret

000001bc <Mcp2515Read>:
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	6a 01       	movw	r12, r20
 1d0:	f2 2e       	mov	r15, r18
 1d2:	01 30       	cpi	r16, 0x01	; 1
 1d4:	11 f0       	breq	.+4      	; 0x1da <Mcp2515Read+0x1e>
 1d6:	04 30       	cpi	r16, 0x04	; 4
 1d8:	09 f4       	brne	.+2      	; 0x1dc <Mcp2515Read+0x20>
 1da:	5b 98       	cbi	0x0b, 3	; 11
 1dc:	66 23       	and	r22, r22
 1de:	79 f0       	breq	.+30     	; 0x1fe <Mcp2515Read+0x42>
 1e0:	ec 01       	movw	r28, r24
 1e2:	61 50       	subi	r22, 0x01	; 1
 1e4:	a6 2e       	mov	r10, r22
 1e6:	b1 2c       	mov	r11, r1
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	a2 1a       	sub	r10, r18
 1ec:	b2 0a       	sbc	r11, r18
 1ee:	a8 0e       	add	r10, r24
 1f0:	b9 1e       	adc	r11, r25
 1f2:	89 91       	ld	r24, Y+
 1f4:	0e 94 1a 03 	call	0x634	; 0x634 <spiWrite>
 1f8:	ca 15       	cp	r28, r10
 1fa:	db 05       	cpc	r29, r11
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <Mcp2515Read+0x36>
 1fe:	ff 20       	and	r15, r15
 200:	81 f0       	breq	.+32     	; 0x222 <Mcp2515Read+0x66>
 202:	e6 01       	movw	r28, r12
 204:	fa 94       	dec	r15
 206:	ef 2c       	mov	r14, r15
 208:	f1 2c       	mov	r15, r1
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	e8 1a       	sub	r14, r24
 20e:	f8 0a       	sbc	r15, r24
 210:	ec 0c       	add	r14, r12
 212:	fd 1c       	adc	r15, r13
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	0e 94 1f 03 	call	0x63e	; 0x63e <spiRead>
 21a:	89 93       	st	Y+, r24
 21c:	ec 16       	cp	r14, r28
 21e:	fd 06       	cpc	r15, r29
 220:	c9 f7       	brne	.-14     	; 0x214 <Mcp2515Read+0x58>
 222:	02 30       	cpi	r16, 0x02	; 2
 224:	11 f0       	breq	.+4      	; 0x22a <Mcp2515Read+0x6e>
 226:	04 30       	cpi	r16, 0x04	; 4
 228:	09 f4       	brne	.+2      	; 0x22c <Mcp2515Read+0x70>
 22a:	5b 9a       	sbi	0x0b, 3	; 11
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	08 95       	ret

00000242 <Mcp2515WriteID>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <Mcp2515WriteID+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <Mcp2515WriteID+0x8>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	9c 01       	movw	r18, r24
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	36 95       	lsr	r19
 25c:	27 95       	ror	r18
 25e:	36 95       	lsr	r19
 260:	27 95       	ror	r18
 262:	29 83       	std	Y+1, r18	; 0x01
 264:	82 95       	swap	r24
 266:	88 0f       	add	r24, r24
 268:	80 7e       	andi	r24, 0xE0	; 224
 26a:	8a 83       	std	Y+2, r24	; 0x02
 26c:	1b 82       	std	Y+3, r1	; 0x03
 26e:	1c 82       	std	Y+4, r1	; 0x04
 270:	48 e0       	ldi	r20, 0x08	; 8
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	ce 01       	movw	r24, r28
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <Mcp2515BitModify>:
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <Mcp2515BitModify+0x6>
 290:	00 d0       	rcall	.+0      	; 0x292 <Mcp2515BitModify+0x8>
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	5b 98       	cbi	0x0b, 3	; 11
 298:	95 e0       	ldi	r25, 0x05	; 5
 29a:	99 83       	std	Y+1, r25	; 0x01
 29c:	8a 83       	std	Y+2, r24	; 0x02
 29e:	6b 83       	std	Y+3, r22	; 0x03
 2a0:	4c 83       	std	Y+4, r20	; 0x04
 2a2:	44 e0       	ldi	r20, 0x04	; 4
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 2ae:	5b 9a       	sbi	0x0b, 3	; 11
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Mcp2515ReadState>:
 2be:	0f 93       	push	r16
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <Mcp2515ReadState+0x8>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	04 e0       	ldi	r16, 0x04	; 4
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	ae 01       	movw	r20, r28
 2d2:	4f 5f       	subi	r20, 0xFF	; 255
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	ce 01       	movw	r24, r28
 2da:	02 96       	adiw	r24, 0x02	; 2
 2dc:	0e 94 de 00 	call	0x1bc	; 0x1bc <Mcp2515Read>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <Mcp2515Init>:
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <Mcp2515Init+0x8>
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <Mcp2515Init+0xa>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <Mcp2515Init+0xc>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	08 f0       	brcs	.+2      	; 0x304 <Mcp2515Init+0x16>
 302:	44 c0       	rjmp	.+136    	; 0x38c <Mcp2515Init+0x9e>
 304:	18 2f       	mov	r17, r24
 306:	22 9a       	sbi	0x04, 2	; 4
 308:	53 9a       	sbi	0x0a, 3	; 10
 30a:	44 e0       	ldi	r20, 0x04	; 4
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 316:	8f e3       	ldi	r24, 0x3F	; 63
 318:	9c e9       	ldi	r25, 0x9C	; 156
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <Mcp2515Init+0x2c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <Mcp2515Init+0x32>
 320:	00 00       	nop
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	e0 e0       	ldi	r30, 0x00	; 0
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	de 01       	movw	r26, r28
 32a:	11 96       	adiw	r26, 0x01	; 1
 32c:	01 90       	ld	r0, Z+
 32e:	0d 92       	st	X+, r0
 330:	8a 95       	dec	r24
 332:	e1 f7       	brne	.-8      	; 0x32c <Mcp2515Init+0x3e>
 334:	81 2f       	mov	r24, r17
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	e8 0f       	add	r30, r24
 340:	f9 1f       	adc	r31, r25
 342:	ea 5f       	subi	r30, 0xFA	; 250
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	80 81       	ld	r24, Z
 348:	8b 83       	std	Y+3, r24	; 0x03
 34a:	81 81       	ldd	r24, Z+1	; 0x01
 34c:	8c 83       	std	Y+4, r24	; 0x04
 34e:	82 81       	ldd	r24, Z+2	; 0x02
 350:	8d 83       	std	Y+5, r24	; 0x05
 352:	44 e0       	ldi	r20, 0x04	; 4
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	8d e0       	ldi	r24, 0x0D	; 13
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	1b 82       	std	Y+3, r1	; 0x03
 368:	44 e0       	ldi	r20, 0x04	; 4
 36a:	63 e0       	ldi	r22, 0x03	; 3
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 374:	8f e0       	ldi	r24, 0x0F	; 15
 376:	8a 83       	std	Y+2, r24	; 0x02
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	8b 83       	std	Y+3, r24	; 0x03
 37c:	44 e0       	ldi	r20, 0x04	; 4
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	01 c0       	rjmp	.+2      	; 0x38e <Mcp2515Init+0xa0>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	26 96       	adiw	r28, 0x06	; 6
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	08 95       	ret

000003a2 <Mcp2515ReadMessage>:

uint8_t		Mcp2515ReadMessage( tCAN *Message )
{	
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <Mcp2515ReadMessage+0xe>
 3b0:	1f 92       	push	r1
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	7c 01       	movw	r14, r24
	uint8_t Status = Mcp2515ReadState(SPI_RX_STATUS);
 3b8:	80 eb       	ldi	r24, 0xB0	; 176
 3ba:	0e 94 5f 01 	call	0x2be	; 0x2be <Mcp2515ReadState>
 3be:	18 2f       	mov	r17, r24
	uint8_t Address;
	
	if( ((Status & 1<<6)) ) 
 3c0:	80 74       	andi	r24, 0x40	; 64
 3c2:	16 ff       	sbrs	r17, 6
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <Mcp2515ReadMessage+0x2a>
	{
		// Nachricht in Puffer 0
		Address = SPI_READ_RX;
 3c6:	80 e9       	ldi	r24, 0x90	; 144
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <Mcp2515ReadMessage+0x34>
	}
	else if( ((Status & 1<<7)) ) 
 3cc:	11 23       	and	r17, r17
 3ce:	0c f0       	brlt	.+2      	; 0x3d2 <Mcp2515ReadMessage+0x30>
 3d0:	52 c0       	rjmp	.+164    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		// Nachricht in Puffer 1
		Address = (SPI_READ_RX | 0x04);
 3d2:	84 e9       	ldi	r24, 0x94	; 148
 3d4:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error: Keine neue Nachricht vorhanden
		return 0;
	}
	
	Mcp2515Write( &Address , 1 , START_TX );
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
	
	uint8_t Buff[] = { 0 , 0 };
 3e2:	1a 82       	std	Y+2, r1	; 0x02
 3e4:	1b 82       	std	Y+3, r1	; 0x03
	Mcp2515Read( 0 , 0 , Buff , 2 , NO_ACTION );
 3e6:	08 e0       	ldi	r16, 0x08	; 8
 3e8:	22 e0       	ldi	r18, 0x02	; 2
 3ea:	ae 01       	movw	r20, r28
 3ec:	4e 5f       	subi	r20, 0xFE	; 254
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <Mcp2515Read>
	
	// Empfangenen Nachrichten "Idetifier" lesen
	Message->Identifier  = (uint16_t) Buff[0] << 3;
	Message->Identifier |= (uint16_t) Buff[1] >> 5;
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	2b 81       	ldd	r18, Y+3	; 0x03
 40c:	22 95       	swap	r18
 40e:	26 95       	lsr	r18
 410:	27 70       	andi	r18, 0x07	; 7
 412:	82 2b       	or	r24, r18
 414:	f7 01       	movw	r30, r14
 416:	91 83       	std	Z+1, r25	; 0x01
 418:	80 83       	st	Z, r24
	
	// Dummy Bytes senden um internen Adresszeiger beim MCP2515 zu inkrementieren
	Buff[0] = 0xFF; Buff[1] = 0xFF;
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	8a 83       	std	Y+2, r24	; 0x02
 41e:	8b 83       	std	Y+3, r24	; 0x03
	Mcp2515Write( Buff , 2 , NO_ACTION );
 420:	48 e0       	ldi	r20, 0x08	; 8
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	ce 01       	movw	r24, r28
 426:	02 96       	adiw	r24, 0x02	; 2
 428:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
	
	// DLC lesen
	Mcp2515Read( 0 , 0 , Buff , 1 , NO_ACTION );
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	ae 01       	movw	r20, r28
 430:	4e 5f       	subi	r20, 0xFE	; 254
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 de 00 	call	0x1bc	; 0x1bc <Mcp2515Read>
	
	uint8_t Length = Buff[0] & 0x0F;
 43e:	2a 81       	ldd	r18, Y+2	; 0x02
	Message->Header.Length = Length;
 440:	2f 70       	andi	r18, 0x0F	; 15
 442:	92 2f       	mov	r25, r18
 444:	99 0f       	add	r25, r25
 446:	99 0f       	add	r25, r25
 448:	99 0f       	add	r25, r25
 44a:	f7 01       	movw	r30, r14
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	87 78       	andi	r24, 0x87	; 135
	
	Message->Header.Rtr = ( (Status & 1<<3) == 1) ? 1 : 0;
 450:	89 2b       	or	r24, r25
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	82 83       	std	Z+2, r24	; 0x02
	
	// Daten abholen
	Mcp2515Read( 0 , 0 , Message->Data , Length , NO_ACTION );
 456:	a7 01       	movw	r20, r14
 458:	4d 5f       	subi	r20, 0xFD	; 253
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 de 00 	call	0x1bc	; 0x1bc <Mcp2515Read>
	{
		Mcp2515BitModify(CANINTF , (1<<RX0IF) , 0 );
	}
	else 
	{
		Mcp2515BitModify(CANINTF , (1<<RX1IF) , 0 );
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	8c e2       	ldi	r24, 0x2C	; 44
 46c:	0e 94 45 01 	call	0x28a	; 0x28a <Mcp2515BitModify>
	}
	
	return (Status & 0x07) + 1;
 470:	17 70       	andi	r17, 0x07	; 7
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	81 0f       	add	r24, r17
}
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	08 95       	ret

0000048a <Mcp2515SendMessage>:

uint8_t		Mcp2515SendMessage( tCAN *Message )
{
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <Mcp2515SendMessage+0xa>
 494:	1f 92       	push	r1
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	8c 01       	movw	r16, r24
	uint8_t Status = Mcp2515ReadState(SPI_READ_STATUS);
 49c:	80 ea       	ldi	r24, 0xA0	; 160
 49e:	0e 94 5f 01 	call	0x2be	; 0x2be <Mcp2515ReadState>
	 
	uint8_t Address;
	
	if (((Status & 1<<2) == 0)) 
 4a2:	82 fd       	sbrc	r24, 2
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <Mcp2515SendMessage+0x20>
	{
		Address = 0x00;
 4a6:	19 82       	std	Y+1, r1	; 0x01
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <Mcp2515SendMessage+0x32>
	}
	else if (((Status & 1<<4) == 0)) 
 4aa:	84 fd       	sbrc	r24, 4
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <Mcp2515SendMessage+0x2a>
	{
		Address = 0x02;
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <Mcp2515SendMessage+0x32>
	} 
	else if (((Status & 1<<6) == 0)) 
 4b4:	86 fd       	sbrc	r24, 6
 4b6:	3c c0       	rjmp	.+120    	; 0x530 <__stack+0x31>
	{
		Address = 0x04;
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	89 83       	std	Y+1, r24	; 0x01
		*  Nachricht gesendet werden 
		*/		
		return 0;
	}
	
	uint8_t BuffAddress = SPI_WRITE_TX | Address;
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	80 64       	ori	r24, 0x40	; 64
 4c0:	8a 83       	std	Y+2, r24	; 0x02
	Mcp2515Write( &BuffAddress , 1 , START_TX );
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	ce 01       	movw	r24, r28
 4c8:	02 96       	adiw	r24, 0x02	; 2
 4ca:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
	
	#if SUPPORT_EXTENDED_CANID
		Mcp2515WriteID( &Message->Identifier , Message->Header.Extended , NO_ACTION );
	#else
		Mcp2515WriteID( &Message->Identifier , NO_ACTION );
 4ce:	68 e0       	ldi	r22, 0x08	; 8
 4d0:	c8 01       	movw	r24, r16
 4d2:	0e 94 21 01 	call	0x242	; 0x242 <Mcp2515WriteID>
	#endif

	uint8_t Length = Message->Header.Length & 0x0F;
 4d6:	f8 01       	movw	r30, r16
 4d8:	92 81       	ldd	r25, Z+2	; 0x02
 4da:	89 2f       	mov	r24, r25
 4dc:	86 95       	lsr	r24
 4de:	86 95       	lsr	r24
 4e0:	86 95       	lsr	r24
 4e2:	8f 70       	andi	r24, 0x0F	; 15
 4e4:	8b 83       	std	Y+3, r24	; 0x03
	
 	// Ist die Nachricht ein "Remote Transmit Request" ?
 	if ( Message->Header.Rtr )
 4e6:	90 ff       	sbrs	r25, 0
 4e8:	09 c0       	rjmp	.+18     	; 0x4fc <Mcp2515SendMessage+0x72>
 	{
 		// Ein RTR hat zwar eine Laenge,
 		// enthaelt aber keine Daten

 		// Nachrichten Laenge + RTR einstellen
		Length |= 1<<RTR;
 4ea:	80 64       	ori	r24, 0x40	; 64
 4ec:	8b 83       	std	Y+3, r24	; 0x03
 		Mcp2515Write( &Length , 1 , STOP_TX );
 4ee:	42 e0       	ldi	r20, 0x02	; 2
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	ce 01       	movw	r24, r28
 4f4:	03 96       	adiw	r24, 0x03	; 3
 4f6:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <__stack+0x15>
 	}
 	else
 	{
 		// Nachrichten Laenge einstellen
		Mcp2515Write( &Length , 1 , NO_ACTION );
 4fc:	48 e0       	ldi	r20, 0x08	; 8
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	ce 01       	movw	r24, r28
 502:	03 96       	adiw	r24, 0x03	; 3
 504:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
 		
		// Daten
		Mcp2515Write( Message->Data , Length , STOP_TX );
 508:	42 e0       	ldi	r20, 0x02	; 2
 50a:	6b 81       	ldd	r22, Y+3	; 0x03
 50c:	c8 01       	movw	r24, r16
 50e:	03 96       	adiw	r24, 0x03	; 3
 510:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
	}
	
 	// CAN Nachricht verschicken
 	// die letzten drei Bit im RTS Kommando geben an welcher
 	// Puffer gesendet werden soll.
 	Address = (Address == 0) ? 1 : Address;
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	81 11       	cpse	r24, r1
 518:	01 c0       	rjmp	.+2      	; 0x51c <__stack+0x1d>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 
	Address |= SPI_RTS;
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	89 83       	std	Y+1, r24	; 0x01

	Mcp2515Write( &Address , 1 , EASY_TX ); 
 520:	44 e0       	ldi	r20, 0x04	; 4
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	0e 94 b3 00 	call	0x166	; 0x166 <Mcp2515Write>
	
	return Address;
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__stack+0x33>
	else 
	{
		/* Alle Puffer sind in benutzung, es kann gerade keine 
		*  Nachricht gesendet werden 
		*/		
		return 0;
 530:	80 e0       	ldi	r24, 0x00	; 0
	Address |= SPI_RTS;

	Mcp2515Write( &Address , 1 , EASY_TX ); 
	
	return Address;
}
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	08 95       	ret

00000542 <Mcp2515GetError>:

uint8_t		Mcp2515GetError( tCANError *Object )
{
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	00 d0       	rcall	.+0      	; 0x54e <Mcp2515GetError+0xc>
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	7c 01       	movw	r14, r24
	uint8_t Data[] = { 0x00 , 0x00 };
 554:	19 82       	std	Y+1, r1	; 0x01
 556:	1a 82       	std	Y+2, r1	; 0x02
	
	/*
	*	0: Fehlerspeicher für TEC (Transmit Error Counter)
	*	1: Fehlerspeicher für REC (Receive Error Counter)
	*/
	Mcp2515Read( (uint8_t*)(TEC) , 1 , Data , 2 , EASY_TX );
 558:	04 e0       	ldi	r16, 0x04	; 4
 55a:	22 e0       	ldi	r18, 0x02	; 2
 55c:	ae 01       	movw	r20, r28
 55e:	4f 5f       	subi	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	8c e1       	ldi	r24, 0x1C	; 28
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 de 00 	call	0x1bc	; 0x1bc <Mcp2515Read>
	Object->Transmit = Data[0];
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	f7 01       	movw	r30, r14
 570:	81 83       	std	Z+1, r24	; 0x01
	Object->Receive  = Data[1];
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	80 83       	st	Z, r24

	return 0;
}
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	08 95       	ret

00000588 <spiInit>:
 588:	e8 2f       	mov	r30, r24
 58a:	23 9a       	sbi	0x04, 3	; 4
 58c:	24 98       	cbi	0x04, 4	; 4
 58e:	25 9a       	sbi	0x04, 5	; 4
 590:	22 9a       	sbi	0x04, 2	; 4
 592:	8c b5       	in	r24, 0x2c	; 44
 594:	80 65       	ori	r24, 0x50	; 80
 596:	8c bd       	out	0x2c, r24	; 44
 598:	61 30       	cpi	r22, 0x01	; 1
 59a:	51 f0       	breq	.+20     	; 0x5b0 <spiInit+0x28>
 59c:	28 f0       	brcs	.+10     	; 0x5a8 <spiInit+0x20>
 59e:	62 30       	cpi	r22, 0x02	; 2
 5a0:	59 f0       	breq	.+22     	; 0x5b8 <spiInit+0x30>
 5a2:	63 30       	cpi	r22, 0x03	; 3
 5a4:	69 f0       	breq	.+26     	; 0x5c0 <spiInit+0x38>
 5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <spiInit+0x3e>
 5a8:	8c b5       	in	r24, 0x2c	; 44
 5aa:	83 7f       	andi	r24, 0xF3	; 243
 5ac:	8c bd       	out	0x2c, r24	; 44
 5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <spiInit+0x3e>
 5b0:	8c b5       	in	r24, 0x2c	; 44
 5b2:	84 60       	ori	r24, 0x04	; 4
 5b4:	8c bd       	out	0x2c, r24	; 44
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <spiInit+0x3e>
 5b8:	8c b5       	in	r24, 0x2c	; 44
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	8c bd       	out	0x2c, r24	; 44
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <spiInit+0x3e>
 5c0:	8c b5       	in	r24, 0x2c	; 44
 5c2:	8c 60       	ori	r24, 0x0C	; 12
 5c4:	8c bd       	out	0x2c, r24	; 44
 5c6:	8e 2f       	mov	r24, r30
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	88 30       	cpi	r24, 0x08	; 8
 5cc:	91 05       	cpc	r25, r1
 5ce:	20 f5       	brcc	.+72     	; 0x618 <spiInit+0x90>
 5d0:	fc 01       	movw	r30, r24
 5d2:	ec 5c       	subi	r30, 0xCC	; 204
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	0c 94 25 03 	jmp	0x64a	; 0x64a <__tablejump2__>
 5da:	8c b5       	in	r24, 0x2c	; 44
 5dc:	8c 7f       	andi	r24, 0xFC	; 252
 5de:	8c bd       	out	0x2c, r24	; 44
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <spiInit+0x90>
 5e2:	8c b5       	in	r24, 0x2c	; 44
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	8c bd       	out	0x2c, r24	; 44
 5e8:	17 c0       	rjmp	.+46     	; 0x618 <spiInit+0x90>
 5ea:	8c b5       	in	r24, 0x2c	; 44
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	8c bd       	out	0x2c, r24	; 44
 5f0:	13 c0       	rjmp	.+38     	; 0x618 <spiInit+0x90>
 5f2:	8c b5       	in	r24, 0x2c	; 44
 5f4:	83 60       	ori	r24, 0x03	; 3
 5f6:	8c bd       	out	0x2c, r24	; 44
 5f8:	0f c0       	rjmp	.+30     	; 0x618 <spiInit+0x90>
 5fa:	8c b5       	in	r24, 0x2c	; 44
 5fc:	8c 7f       	andi	r24, 0xFC	; 252
 5fe:	8c bd       	out	0x2c, r24	; 44
 600:	0b c0       	rjmp	.+22     	; 0x618 <spiInit+0x90>
 602:	8c b5       	in	r24, 0x2c	; 44
 604:	81 60       	ori	r24, 0x01	; 1
 606:	8c bd       	out	0x2c, r24	; 44
 608:	07 c0       	rjmp	.+14     	; 0x618 <spiInit+0x90>
 60a:	8c b5       	in	r24, 0x2c	; 44
 60c:	82 60       	ori	r24, 0x02	; 2
 60e:	8c bd       	out	0x2c, r24	; 44
 610:	03 c0       	rjmp	.+6      	; 0x618 <spiInit+0x90>
 612:	8c b5       	in	r24, 0x2c	; 44
 614:	83 60       	ori	r24, 0x03	; 3
 616:	8c bd       	out	0x2c, r24	; 44
 618:	44 23       	and	r20, r20
 61a:	19 f0       	breq	.+6      	; 0x622 <spiInit+0x9a>
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	29 f0       	breq	.+10     	; 0x62a <spiInit+0xa2>
 620:	07 c0       	rjmp	.+14     	; 0x630 <spiInit+0xa8>
 622:	8d b5       	in	r24, 0x2d	; 45
 624:	8e 7f       	andi	r24, 0xFE	; 254
 626:	8d bd       	out	0x2d, r24	; 45
 628:	03 c0       	rjmp	.+6      	; 0x630 <spiInit+0xa8>
 62a:	8d b5       	in	r24, 0x2d	; 45
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	8d bd       	out	0x2d, r24	; 45
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	08 95       	ret

00000634 <spiWrite>:
 634:	8e bd       	out	0x2e, r24	; 46
 636:	0d b4       	in	r0, 0x2d	; 45
 638:	07 fe       	sbrs	r0, 7
 63a:	fd cf       	rjmp	.-6      	; 0x636 <spiWrite+0x2>
 63c:	08 95       	ret

0000063e <spiRead>:
 63e:	8e bd       	out	0x2e, r24	; 46
 640:	0d b4       	in	r0, 0x2d	; 45
 642:	07 fe       	sbrs	r0, 7
 644:	fd cf       	rjmp	.-6      	; 0x640 <spiRead+0x2>
 646:	8e b5       	in	r24, 0x2e	; 46
 648:	08 95       	ret

0000064a <__tablejump2__>:
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	05 90       	lpm	r0, Z+
 650:	f4 91       	lpm	r31, Z
 652:	e0 2d       	mov	r30, r0
 654:	09 94       	ijmp

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
